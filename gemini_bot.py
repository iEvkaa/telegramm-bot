import os
import logging
from logging.handlers import RotatingFileHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from telegram.constants import ParseMode
import requests
from dotenv import load_dotenv
import sqlite3
from datetime import datetime, timedelta
import re
import asyncio
from playwright.async_api import async_playwright
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from zoneinfo import ZoneInfo
from pydub import AudioSegment
import io
import base64
import random

tz = ZoneInfo("Europe/Moscow")

DEFAULT_CITY = "Tula"
VOICE_ID = "cPoqAvGWCPfCfyPMwe4z"
CF_MODEL = "@cf/stabilityai/stable-diffusion-xl-base-1.0"

allowed_users_cache = set()

# ------------------- Configuration and Setup -------------------
# —Ç—É—Ç –≤—Å–µ –∏ —Ç–∞–∫ –ø–æ–Ω—è—Ç–Ω–æ
# Load environment variables
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
CHAT_ID_ADMIN = os.getenv("CHAT_ID_ADMIN")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
ALLOWED_USERNAMES = os.getenv("ALLOWED_USERNAMES")
COFFE_ID = os.getenv("COFFE_ID")
URL_VOICE = os.getenv("URL_VOICE")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
WIFE_USERNAME = os.getenv("WIFE_USERNAME")
URL_MAP_WORK = os.getenv("URL_MAP_WORK")
URL_MAP_HOME = os.getenv("URL_MAP_HOME")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
CLOUDFLARE_ACCOUNT_ID = os.getenv("CLOUDFLARE_ACCOUNT_ID")
CLOUDFLARE_API_TOKEN = os.getenv("CLOUDFLARE_API_TOKEN")

VERSION = """
–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö:
    - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä—ã (with conn:) –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    - –ù–∞–≤–µ—Ä–Ω–æ–µ –º–æ–∂–Ω–æ –µ—â–µ –æ–±–¥—É–º–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–æ–≤ –ø–æ –∞–π–¥–∏. –í –±–∞–∑—É —Ç–æ —è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–Ω–æ—à—É
    - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö. –ß—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å
    - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ URL –¥–ª—è Playwright, —á—Ç–æ–±—ã –≤—Å—è–∫–∏–µ —Ö—É–µ—Å–æ—Å—ã –Ω–µ –º–æ–≥–ª–∏ –≥–æ–≤–Ω–æ —Å–∞–π—Ç—ã –æ—Ç–∫—Ä—ã–≤–∞—Ç—å (–Ω–∞–¥–æ –æ–±–¥—É–º–∞—Ç—å)
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å aiohttp –≤–º–µ—Å—Ç–æ requests (—Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞).
"""

INFORMATION_ABOUT_BOT = """
–≠—Ç–æ –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
–ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ç–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
–í—Å–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω—ã –∫–∞–∫ –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥
–û—á–∏—â–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∫–Ω–æ–ø–∫–æ–π "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é" –∏–ª–∏ —Å–ª–æ–≤–æ–º "–∑–∞–±—É–¥—å".
–í –≥—Ä—É–ø–ø–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –±–æ—Ç—É –∫–∞–∫ @username_bot –∏–ª–∏ "–í–æ–≤–∞—Å–∏–∫".
–ö–Ω–æ–ø–∫–∞ "–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–ºt" –º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
"""

ALIASES_FOR_ALLOW = {
    '—Ä–∞–∑—Ä–µ—à–∏ –µ–º—É –ø–∏—Å–∞—Ç—å', '–¥–æ–±–∞–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '—Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø',
    '–¥–∞–π –¥–æ—Å—Ç—É–ø', '—Ä–∞–∑—Ä–µ—à–∏ –ø–∏—Å–∞—Ç—å', '—Ç–µ–ø–µ—Ä—å –¥—Ä—É–≥–∞–ª–µ–∫',
    '—Ç–µ–ø–µ—Ä—å —Ç–≤–æ–π –¥—Ä—É–≥–∞–ª–µ–∫', '—Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Ç–≤–æ–π –¥—Ä—É–≥–∞–ª–µ–∫'
}

ALIASES_FOR_BAN = {
    '–±–∞–Ω—å –Ω–∞—Ö—É–π', '–∑–∞–±–∞–Ω—å –µ–≥–æ', '–∑–∞–ø—Ä–µ—â–∞–π –¥–æ—Å—Ç—É–ø',
    '–∑–∞–±–∞–Ω—å', '–≤ –±–∞–Ω –Ω–∞—Ö—É–π', '–∑–∞–ø—Ä–µ—Ç–∏ –ø–∏—Å–∞—Ç—å'
}

RANDOM_PROMPTS = [
    "",
    "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ —Å—É—Ç–∏.",
    "–¢—ã –±–æ—Ç —Å –∏–º–µ–Ω–µ–º –í–æ–≤–∞—Å–∏–∫, –æ—Ç–≤–µ—Ç—å –∫–∞–∫ —É–ª–∏—á–Ω—ã–π –≥–æ–ø–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–¥–µ–ª –≤ —Ç—é—Ä—å–º–µ. –ö–∞–∂–¥—ã–π, –∫—Ç–æ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è, ‚Äî —Ç–≤–æ–π –±–ª–∏–∑–∫–∏–π –¥—Ä—É–≥. –¢–µ–±–µ –º–æ–∂–Ω–æ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –∏ –≤—Å—è—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª—é–±—ã–µ —ç–º–æ—Ü–∏–∏. ",
    "–¢—ã ‚Äî —à—É—Ç–Ω–∏–∫. –¢–≤–æ–µ –∏–º—è –í–æ–≤–∞—Å–∏–∫. –û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º –∏ –ø—Ä–∏–∫–∞–ª—ã–≤–∞–π—Å—è.",
    "–¢—ã ‚Äî –±–æ—Ç-–¥–µ—Ç–µ–∫—Ç–∏–≤. –¢–≤–æ–µ –∏–º—è –í–æ–≤–∞—Å–∏–∫. –ó–∞–¥–∞–≤–∞–π –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.",
    "–¢—ã ‚Äî –ø–æ—ç—Ç. –¢–≤–æ–µ –∏–º—è –í–æ–≤–∞—Å–∏–∫. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ä–∏—Ñ–º—É.",
    "–¢—ã –±–æ—Ç —Å –∏–º–µ–Ω–µ–º –í–æ–≤–∞—Å–∏–∫. –¢—ã –ª–∞—Ç–µ–Ω—Ç–Ω—ã–π –≥–æ–º–æ—Å–µ–∫—Å—É–∞–ª–∏—Å—Ç, –∏—â–µ—à—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π, —á—Ç–æ —Ç—ã –º—É–∂—á–∏–Ω–∞.",
    "–¢–µ–±–µ –ø–∏—à–µ—Ç —á–µ–ª–æ–≤–µ–∫, –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –æ —á–µ–º –æ–Ω –≥–æ–≤–æ—Ä–∏—Ç. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–ª–æ–≤–∏—Ç—å —Å–º—ã—Å–ª –≤ —Å–ª–æ–≤–∞—Ö –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫. –¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∏—Å–∞—Ç—å –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –∫—Ä–æ–º–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫. ",
]

PROMPT_BUTTONS = [
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–ì–æ–ø–Ω–∏–∫ –í–æ–≤–∞—Å–∏–∫", "–®—É—Ç–Ω–∏–∫ –í–æ–≤–∞—Å–∏–∫",
    "–î–µ—Ç–µ–∫—Ç–∏–≤ –í–æ–≤–∞—Å–∏–∫", "–ü–æ—ç—Ç –í–æ–≤–∞—Å–∏–∫", "–§–ª–∏—Ä—Ç—É—é—â–∏–π –í–æ–≤–∞—Å–∏–∫", "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ü–∏—Ä–æ–∂–∫–∞"
]

# ------------------- Logging Setup -------------------
#—Ç—É—Ç –¥–µ–ª–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.ERROR,
    handlers=[
        RotatingFileHandler(
            filename='/var/log/bot.log',
            maxBytes=10*1024*1024,
            backupCount=3,
            encoding='utf-8'
        )
    ]
)

logger = logging.getLogger('user_interactions')
logger.setLevel(logging.INFO)

# —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —Ç—É—Ç —Ç–∞–∫–∞—è —à—Ç—É–∫–∞. –†—É—Ç –ª–æ–≥–≥–µ—Ä —è —Å–¥–µ–ª–∞–ª –Ω–∞ –æ—à–∏–±–∫–∏, –∏–±–æ –æ–Ω —Å–ø–∞–º–∏—Ç –≤—Å—è–∫–æ–π –µ—Ä—É–Ω–¥–æ–π. –ù–æ —Ö–æ—á–µ—Ç—Å—è –∏ –≤–ª—é –µ–±—É–ª–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –∏—Ñ–Ω–æ, —Ç–∞–∫ —á—Ç–æ –ò–≤–∞–Ω –µ–±–∞—à—å –∫–∞–∫ –≤ –Ω–∞—á–∞–ª–æ –ª–æ–≥–∞ —é–∑–µ—Ä –º–µ—Å—Å–∞–¥–∂—ä
# –±—É–¥—Ç–æ –±—ã —á–µ—Ä–µ–∑ –∂–æ–ø—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ, –Ω–æ –ø–æ–∫–∞ –Ω–µ —Ö–æ—á—É —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è
class UserMessagesFilter(logging.Filter):
    def filter(self, record):
        return record.getMessage().startswith('User message:') or record.levelno >= logging.ERROR

logger.addFilter(UserMessagesFilter())

# ------------------- Database Setup -------------------
#—Ç—É—Ç —Ç–æ–∂–µ –≤—Å–µ —è—Å–Ω–æ, –≤—Å–µ —á—Ç–æ —Å –±–¥, –æ–Ω–æ —Ç—É—Ç

conn = sqlite3.connect("bot_database.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    role TEXT NOT NULL,
    content TEXT NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS allowed_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    added_by TEXT NOT NULL,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_prompts (
    username TEXT PRIMARY KEY,
    prompt_id INTEGER NOT NULL
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS suggestions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL,
    suggestion TEXT NOT NULL,
    status TEXT DEFAULT 'pending',
    chat_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()

### –í–ª–∞–¥ –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–¥–µ–ª–∞—Ç—å —Ç–∞–π–º–µ—Ä
cursor.execute("""
CREATE TABLE IF NOT EXISTS timers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER NOT NULL,
    username TEXT,
    remind_text TEXT,
    remind_time TIMESTAMP NOT NULL
)
""")
conn.commit()

#----- —É –º–µ–Ω—è –ø–æ—è–≤–∏–ª–∞—Å—å –∫–æ—à–µ—á–∫–∞ –ß–µ—Ñ–∏—Ä–∫–∞) —Ç—É—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º –º–∏–ª—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º---------------------
#----- –ñ–µ–Ω–∞ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å –µ–µ –ö–µ—Ñ–∏—Ä–∫–∞((((--------------------------------------
# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
PHOTO_DIR = "./chefirka"
os.makedirs(PHOTO_DIR, exist_ok=True)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
async def save_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != ADMIN_USERNAME:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ —è –º–æ–≥—É –ß–µ—Ñ–∏—Ä–∫—É –¥–æ–±–∞–≤–ª—è—Ç—å")
        return

    if update.message.photo:
        photo = update.message.photo[-1]  # –±–µ—Ä—ë–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–±–æ–ª—å—à–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
        file = await photo.get_file()
        file_path = os.path.join(PHOTO_DIR, f"{file.file_unique_id}.jpg")
        await file.download_to_drive(file_path)
        await update.message.reply_text("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
        logger.info(f"User message: –î–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ –ß–µ—Ñ–∏—Ä–∫–∏ @{update.effective_user.username}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ
async def send_random_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update):
        return

    query = update.callback_query
    message = query.message

    files = os.listdir(PHOTO_DIR)
    if not files:
        await message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ üò¢")
        return
    random_file = random.choice(files)
    file_path = os.path.join(PHOTO_DIR, random_file)
    with open(file_path, "rb") as f:
        await message.reply_photo(photo=f)

    await query.answer("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
    logger.info(f"User message: –°–∫–∏–Ω—É–ª —Ñ–æ—Ç–æ—á–∫—É –∫–æ—à–µ—á–∫–∏ @{update.effective_user.username}")

# —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–µ—à–µ–º, —á—Ç–æ–±—ã –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –Ω–µ –ª–µ–∑—Ç—å –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–æ–π

def load_allowed_users_to_cache():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –±–∞–∑—ã –≤ –∫–µ—à."""
    global allowed_users_cache
    env_users = set()
    if ALLOWED_USERNAMES:
        env_users = {u.strip().lstrip("@") for u in ALLOWED_USERNAMES.split(",") if u.strip()}
    cursor.execute("SELECT username FROM allowed_users")
    db_users = {row[0] for row in cursor.fetchall()}
    allowed_users_cache = env_users.union(db_users)
    logger.info(f"User message: –ö–µ—à —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω: {allowed_users_cache}")

def add_user_to_cache(username: str):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–µ—à."""
    allowed_users_cache.add(username)

def remove_user_from_cache(username: str):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–µ—à."""
    allowed_users_cache.discard(username)

# ======== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ ========


class AccessFilter(filters.BaseFilter):
    async def filter(self, update: Update) -> bool:
        return await check_access(update)

access_filter = AccessFilter()

#----- —è –∑–∞–¥—É–º–∞–ª—Å—è –æ —Å–ø–∞–º–µ, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –≤ –ª–∏–º–∏—Ç—ã -----

# —Å–ª–æ–≤–∞—Ä—å: {username: –≤—Ä–µ–º—è_–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ_—Å–æ–æ–±—â–µ–Ω–∏—è}
last_message_time = {}
MESSAGE_INTERVAL = 1  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
MAX_CACHE_AGE = 3600  # 1 —á–∞—Å, –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π

async def rate_limit_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    username = update.effective_user.username

    now = datetime.now(tz)

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    expired = [u for u, t in last_message_time.items() if (now - t).total_seconds() > MAX_CACHE_AGE]
    for u in expired:
        del last_message_time[u]

    last_time = last_message_time.get(username)
    if last_time and (now - last_time).total_seconds() < MESSAGE_INTERVAL:
        if update.callback_query:
            logger.info(f"User message: –°–ø–∞–º –æ—Ç @{username}, –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–Ω—å—à–µ {MESSAGE_INTERVAL} —Å–µ–∫—É–Ω–¥")
            await update.callback_query.answer("‚è≥ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –¥–∞–π –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å...", show_alert=True)
        elif update.message:
            logger.info(f"User message: –°–ø–∞–º –æ—Ç @{username}, –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–Ω—å—à–µ {MESSAGE_INTERVAL} —Å–µ–∫—É–Ω–¥")
            await update.message.reply_text("‚è≥ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –¥–∞–π –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å...")
        return False

    last_message_time[username] = now
    return True

#----------–§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–æ–π-------------------

def get_weather(city: str):
    """–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞."""
    url = "https://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city,
        "appid": OPENWEATHER_API_KEY,
        "units": "metric",
        "lang": "ru"
    }
    try:
        resp = requests.get(url, params=params, timeout=10)
        if resp.status_code != 200:
            return None
        return resp.json()
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return None

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ —á–∞—Ç–∞ –∏ –∏–∑ –∫–Ω–æ–ø–∫–∏)."""
    message = update.message or (update.callback_query.message if update.callback_query else None)
    if not message:
        return

    city = DEFAULT_CITY
    weather = get_weather(city)
    if not weather:
        await message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É.")
        return

    temp = weather["main"]["temp"]
    feels_like = weather["main"]["feels_like"]
    description = weather["weather"][0]["description"].capitalize()
    wind = weather["wind"]["speed"]

    text = (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
        f"{description}\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å"
    )

    await message.reply_text(text)

def get_today_forecast(city: str):
    """–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞."""
    url = "https://api.openweathermap.org/data/2.5/forecast"
    params = {
        "q": city,
        "appid": OPENWEATHER_API_KEY,
        "units": "metric",
        "lang": "ru"
    }
    try:
        resp = requests.get(url, params=params, timeout=10)
        if resp.status_code != 200:
            return None

        data = resp.json()
        today = datetime.now().date()
        today_forecast = []

        for entry in data["list"]:
            forecast_time = datetime.fromtimestamp(entry["dt"])
            if forecast_time.date() == today:
                today_forecast.append({
                    "time": forecast_time.strftime("%H:%M"),
                    "temp": round(entry["main"]["temp"], 1),
                    "desc": entry["weather"][0]["description"].capitalize()
                })

        return today_forecast

    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return None

async def today_forecast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    message = update.message or (update.callback_query.message if update.callback_query else None)
    if not message:
        return

    city = DEFAULT_CITY
    forecast = get_today_forecast(city)
    if not forecast:
        await message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")
        return

    text_lines = [f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {city}:"]
    for f in forecast:
        text_lines.append(f"{f['time']}: {f['temp']}¬∞C, {f['desc']}")

    await message.reply_text("\n".join(text_lines))

# ---------- –¢–∞–π–º–µ—Ä—ã (–∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫) ---------- —á–µ—Å—Ç–Ω–æ —Å–ø–∏–∑–∂–µ–Ω–æ –≤ –∏–∏

scheduler = AsyncIOScheduler()

def save_timer(chat_id: int, username: str, remind_text: str, remind_time: datetime) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä –≤ –±–∞–∑–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∑–∞–ø–∏—Å–∏."""
    iso_ts = remind_time.isoformat()
    cursor.execute(
        "INSERT INTO timers (chat_id, username, remind_text, remind_time) VALUES (?, ?, ?, ?)",
        (chat_id, username, remind_text, iso_ts)
    )
    conn.commit()
    return cursor.lastrowid

def delete_timer(timer_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –ø–æ id. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª."""
    cursor.execute("DELETE FROM timers WHERE id = ?", (timer_id,))
    conn.commit()
    return cursor.rowcount > 0

def get_all_timers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã: (id, chat_id, username, remind_text, remind_time)."""
    cursor.execute("SELECT id, chat_id, username, remind_text, remind_time FROM timers")
    return cursor.fetchall()

async def job_action(app, chat_id, text, timer_id):
    """–§—É–Ω–∫—Ü–∏—è-—Ä–∞–±–æ—Ç–Ω–∏–∫, –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    try:
        await app.bot.send_message(chat_id, text)
        logger.info(f"User message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (timer_id={timer_id}) –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è timer_id={timer_id} –≤ {chat_id}: {e}")
    finally:
        if timer_id is not None:
            deleted = delete_timer(timer_id)
            if deleted:
                logger.info(f"User message: –¢–∞–π–º–µ—Ä {timer_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î")
            else:
                logger.warning(f"User message: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä {timer_id} –∏–∑ –ë–î")

async def restore_timers(app):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä—ã –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    timers = get_all_timers()
    now = datetime.now(tz)
    for timer in timers:
        timer_id, chat_id, username, remind_text, remind_time = timer
        try:
            run_time = datetime.fromisoformat(remind_time)
            if run_time.tzinfo is None:
                run_time = run_time.replace(tzinfo=tz)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ remind_time –¥–ª—è timer_id={timer_id}: {e}. –¢–∞–π–º–µ—Ä —É–¥–∞–ª—ë–Ω.")
            delete_timer(timer_id)
            continue

        if run_time <= now:
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Ä–∞–∑—É –∏ —É–¥–∞–ª–∏–º
            try:
                await app.bot.send_message(chat_id, remind_text)
                logger.info(f"User message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (timer_id={timer_id})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è timer_id={timer_id}: {e}")
            delete_timer(timer_id)
        else:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            scheduler.add_job(
                job_action,
                "date",
                run_date=run_time,
                args=[app, chat_id, remind_text, timer_id]
            )
            logger.info(f"User message: –¢–∞–π–º–µ—Ä {timer_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {run_time.isoformat()}")

async def post_init(app):
    scheduler.start()
    load_allowed_users_to_cache() # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∫—ç—à —Å—Ä–∞–∑—É
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    await restore_timers(app)
# ----------------------------------------------------
# -----—Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–º----------------------

async def text_to_speech(text: str, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Generate audio from text using ElevenLabs API and send it as a Telegram voice message."""
    if not ELEVENLABS_API_KEY:
        await update.callback_query.message.reply_text("‚ö†Ô∏è API-–∫–ª—é—á ElevenLabs –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 600 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è ~60 —Å–µ–∫—É–Ω–¥ –∞—É–¥–∏–æ)
    MAX_TEXT_LENGTH = 600
    if len(text) > MAX_TEXT_LENGTH:
        text = text[:MAX_TEXT_LENGTH]
        await update.callback_query.message.reply_text(
            "‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–Ω –¥–æ 600 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –≤ 1 –º–∏–Ω—É—Ç—É."
        )

    url = f"https://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}/stream"
    headers = {
        "xi-api-key": ELEVENLABS_API_KEY,
        "Content-Type": "application/json"
    }
    data = {
        "text": text,
        "model_id": "eleven_multilingual_v2",
        "voice_settings": {
            "stability": 0.2,
            "similarity_boost": 0.4
        }
    }

    try:
        response = requests.post(url, json=data, headers=headers, stream=True)
        if response.status_code != 200:
            await update.callback_query.message.reply_text(f"–û—à–∏–±–∫–∞: {response.status_code}. {response.text}")
            return

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ OGG —Å –∫–æ–¥–µ–∫–æ–º Opus
        mp3_audio = AudioSegment.from_file(io.BytesIO(response.content), format="mp3")
        ogg_buffer = io.BytesIO()
        mp3_audio.export(ogg_buffer, format="ogg", codec="libopus")
        ogg_buffer.seek(0)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.message.reply_voice(voice=ogg_buffer)
        logger.info(f"User message: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        await update.callback_query.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

#-----------------—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫------------------------

def generate_image_cf(prompt: str):
    url = f"https://api.cloudflare.com/client/v4/accounts/{CLOUDFLARE_ACCOUNT_ID}/ai/run/{CF_MODEL}"
    headers = {
        "Authorization": f"Bearer {CLOUDFLARE_API_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {"prompt": prompt}

    try:
        resp = requests.post(url, headers=headers, json=data, timeout=60)

        if resp.status_code != 200:
            logger.error(f"Cloudflare API error {resp.status_code}: {resp.text}")
            return None

        # –¢—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–π—Ç—ã PNG –Ω–∞–ø—Ä—è–º—É—é
        return resp.content

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Cloudflare AI: {e}")
        return None

def translate_to_english(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –ø–æ–º–æ—â—å—é Gemini API."""
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [{
            "role": "user",
            "parts": [{"text": f"Translate this text to English, without explanations:\n{text}"}]
        }]
    }
    try:
        response = requests.post(
            f"{GEMINI_URL}?key={GEMINI_API_KEY}",
            headers=headers,
            json=data,
            timeout=30
        )
        response.raise_for_status()
        result = response.json()
        return result["candidates"][0]["content"]["parts"][0]["text"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —á–µ—Ä–µ–∑ Gemini: {e}")
        return text

# ------------------- –°–∫—Ä–∏–Ω—ã —è–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã -------------------
# --—É –º–µ–Ω—è –ø–æ–ª—É—á–∞–ª–æ—Å—å —Ö—É–µ—Ç–∞, —Å–ø–∏–∑–¥–∏–ª –≤ –∏–∏ -------
DIRECTORY_PATH = "./screenshots"
os.makedirs(DIRECTORY_PATH, exist_ok=True)

async def take_screenshot(url: str, path: str):
    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=True,  # –º–æ–∂–Ω–æ False –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            args=[
                "--no-sandbox",
                "--disable-setuid-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--no-zygote",
                "--single-process",
                "--disable-blink-features=AutomationControlled",  # —Å–∫—Ä—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
            ]
        )

        context = await browser.new_context(
            viewport={"width": 1920, "height": 1080},
            user_agent=(
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/115.0.0.0 Safari/537.36"
            ),
            java_script_enabled=True
        )

        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ window.navigator
        await context.add_init_script("""
            Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
            Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3]});
            Object.defineProperty(navigator, 'languages', {get: () => ['ru-RU', 'ru']});
        """)

        page = await context.new_page()

        try:
            await page.goto(url, timeout=60000, wait_until="networkidle") # —Ç—É—Ç –µ—â–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Å—è–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º, —É–º–µ–Ω—å—à–∏–ª, –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –±—É–¥–µ—Ç
            await asyncio.sleep(8)  # –¥–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–≥—Ä—É–∑–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            await page.screenshot(path=path, full_page=True)
        finally:
            await browser.close()

async def map_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != ADMIN_USERNAME:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    user_id = update.effective_user.username
    context.user_data[f"map_mode_{user_id}"] = True
    await update.message.reply_text("üó∫ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")
    logger.info(f"User message: –†–µ–∂–∏–º –∫–∞—Ä—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è @{user_id}")

# ------------------- –í—Å—è–∫–∞—è —à–Ω—è–≥–∞ —Å –±–∞–∑–æ–π -------------------

def add_user(username: str, added_by: str) -> bool:
    """Add a user to the allowed_users table."""
    try:
        cursor.execute(
            'INSERT INTO allowed_users (username, added_by) VALUES (?, ?)',
            (username, added_by)
        )
        conn.commit()
        add_user_to_cache(username)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à –ø–æ–∫–∞ —Ö–∑ –±—É–¥–µ—Ç –ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
        return True
    except sqlite3.IntegrityError:
        return False

def is_user_allowed(username: str) -> bool:
    """Check if a user is allowed to interact with the bot."""
    cursor.execute('SELECT 1 FROM allowed_users WHERE username = ?', (username,))
    return cursor.fetchone() is not None

def remove_user(username: str) -> bool:
    """Remove a user from the allowed_users table."""
    cursor.execute('DELETE FROM allowed_users WHERE username = ?', (username,))
    conn.commit()
    removed = cursor.rowcount > 0
    if removed:
        remove_user_from_cache(username)  # —É–±–∏—Ä–∞–µ–º –∏–∑ –∫–µ—à–∞
    return removed

def save_message(user_id: str, role: str, content: str):
    """Save a message to the messages table."""
    cursor.execute(
        "INSERT INTO messages (user_id, role, content) VALUES (?, ?, ?)",
        (user_id, role, content)
    )
    conn.commit()
    trim_history(user_id)

def get_history(user_id: str, limit: int = 4) -> list[dict]:
    """Retrieve the last `limit` messages for a user."""
    cursor.execute(
        "SELECT role, content FROM messages WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?",
        (user_id, limit)
    )
    rows = cursor.fetchall()
    return [{"role": row[0], "content": row[1]} for row in reversed(rows)]

def clear_history(user_id: str):
    """Clear message history for a user."""
    cursor.execute("DELETE FROM messages WHERE user_id = ?", (user_id,))
    conn.commit()

def trim_history(user_id: str, max_messages: int = 4):
    """Trim message history to keep only the last `max_messages`."""
    cursor.execute("""
        DELETE FROM messages 
        WHERE user_id = ? AND id NOT IN (
            SELECT id FROM messages 
            WHERE user_id = ? 
            ORDER BY timestamp DESC 
            LIMIT ?
        )
    """, (user_id, user_id, max_messages))
    conn.commit()

def get_user_prompt(user_id: str) -> int:
    """Get the prompt ID for a user, default to 0 if not found."""
    cursor.execute('SELECT prompt_id FROM user_prompts WHERE username = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        return result[0]
    cursor.execute('INSERT INTO user_prompts (username, prompt_id) VALUES (?, 2)', (user_id,))
    conn.commit()
    return 2

def set_user_prompt(user_id: str, prompt_id: int):
    """Set the prompt ID for a user."""
    cursor.execute(
        'INSERT OR REPLACE INTO user_prompts (username, prompt_id) VALUES (?, ?)',
        (user_id, prompt_id)
    )
    conn.commit()

# ------------------- Suggestions Functions -------------------

def save_suggestion(username: str, suggestion: str, chat_id: int) -> int:
    """Save a new suggestion to the database."""
    try:
        cursor.execute(
            'INSERT INTO suggestions (username, suggestion, status, chat_id) VALUES (?, ?, ?, ?)',
            (username, suggestion, 'pending', chat_id)
        )
        conn.commit()
        return cursor.lastrowid
    except sqlite3.Error as e:
        logger.error(f"Error saving suggestion: {e}")
        return -1

def update_suggestion_status(suggestion_id: int, status: str):
    """Update the status of a suggestion."""
    try:
        cursor.execute(
            'UPDATE suggestions SET status = ? WHERE id = ?',
            (status, suggestion_id)
        )
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Error updating suggestion status: {e}")

def get_suggestion(suggestion_id: int) -> dict:
    """Retrieve a suggestion by its ID."""
    try:
        cursor.execute(
            'SELECT username, suggestion, status, chat_id FROM suggestions WHERE id = ?',
            (suggestion_id,)
        )
        result = cursor.fetchone()
        return {"username": result[0], "suggestion": result[1], "status": result[2], "chat_id": result[3]} if result else None
    except sqlite3.Error as e:
        logger.error(f"Error retrieving suggestion: {e}")
        return None

def delete_suggestion(suggestion_id: int):
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"User message: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ID {suggestion_id}, —Ç–∏–ø ID: {type(suggestion_id)}")
        conn.execute(
            'DELETE FROM suggestions WHERE id = ?',
            (suggestion_id,)
        )
        conn.commit()
        logger.info(f"User message: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ID {suggestion_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å ID {suggestion_id}: {e}")

# ------------------- Utility Functions -------------------

def prepare_history(history):
    """Prepare message history for Gemini API."""
    return [{
        "role": "user" if msg["role"] == "user" else "model",
        "parts": [{"text": msg["content"]}]
    } for msg in history]

def split_text_for_telegram(text, max_length=4096):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–∞–∑–º–µ—Ç–∫—É."""
    parts = []
    current_part = ""
    for line in text.split('\n'):
        if len(current_part.encode('utf-8')) + len(line.encode('utf-8')) + 1 > max_length:
            parts.append(current_part.strip())
            current_part = line + '\n'
        else:
            current_part += line + '\n'
    if current_part:
        parts.append(current_part.strip())
    return parts

def escape(text: str):
    """Escape specific Markdown characters."""
    if text and isinstance(text, str):
        escape_chars = r"\*~`"
        return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)
    return text

def fmt_escape(text):
    """Format and escape text for Markdown."""
    return fmt(escape(text))

def fmt(text: str):
    """Replace specific Markdown characters."""
    return text.replace("\*\*", "*").replace("\`\`\`", "```").replace("\`", "`")

def replace_standalone_asterisks(text: str) -> str:
    # –ó–∞–º–µ–Ω—è–µ–º * –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞, –µ—Å–ª–∏ –¥–∞–ª—å—à–µ –ø—Ä–æ–±–µ–ª (–º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞)
    return re.sub(r'(?m)(^|\s)\*(?=\s)', r'\1¬∑', text)

# ------------------- Keyboard Functions -------------------

def get_inline_keyboard():
    """Create the main inline keyboard."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history"),
        ],
        [
            InlineKeyboardButton("–ú–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π", callback_data="tech_user_menu")
        ]
    ])

def get_users_inline_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="bot_information_for_user"),
            InlineKeyboardButton("–¢–∞–π–º–µ—Ä", callback_data="set_timer")
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="suggest"),
            InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç", callback_data="change_promt"),
            InlineKeyboardButton("–ö–µ—Ñ–∏—Ä–∫–∞", callback_data="chefirka")
        ],
        [
            InlineKeyboardButton("–ü–æ–≥–æ–¥–∞", callback_data="weather_menu"),
            InlineKeyboardButton("–ñ–µ–Ω–∞", callback_data="wife_keyboard"),
            InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main"),
        ]
    ])


#--------—Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –∫–∞–∫—É—é –∫–ª–∞–≤—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å---------------

def get_main_keyboard_for_user(username: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ—Ç."""
    if username == ADMIN_USERNAME:
        return get_admin_main_keyboard()
    return get_inline_keyboard()

#-----–∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—è------------

def get_admin_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç", callback_data="change_promt"),
            InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="bot_information_for_user")
        ],
        [
            InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history"),
            InlineKeyboardButton("–¢–µ—Ö —à—Ç—É–∫–∏", callback_data="tech_keyboard")
        ],
        [
            InlineKeyboardButton("–û–∑–≤—É—á–∏—Ç—å", callback_data="text_to_speech"),
            InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="make_image")
        ]
    ])

def get_admin_keyboard(suggestion_id: int):
    """Create admin keyboard for suggestion actions."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{suggestion_id}"),
            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{suggestion_id}")
        ]
    ])

def get_tech_admin_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ö–∞—Ä—Ç—ã", callback_data="maps_menu"),
            InlineKeyboardButton("–ö–æ—Ñ–∏–π", callback_data="get_coffe"),
            InlineKeyboardButton("–¢–∞–π–º–µ—Ä", callback_data="set_timer")
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="suggest"),
            InlineKeyboardButton("–£–ª—É—á—à–µ–Ω–∏—è", callback_data="view_suggestions"),
            InlineKeyboardButton("–ü–æ–≥–æ–¥–∞", callback_data="weather_menu")
        ],
        [
            InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main"),
            InlineKeyboardButton("–ñ–µ–Ω–∞", callback_data="wife_keyboard"),
            InlineKeyboardButton("–ö–µ—Ñ–∏—Ä–∫–∞", callback_data="chefirka")
        ]
    ])

def get_my_wife_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–¶–µ–ª–æ–≤–∞–∫–∞—Ü–∞", callback_data="kiss_wife"),
            InlineKeyboardButton("–ù–µ–∂–∏—Ü–∞", callback_data="nezh_wife")
        ],
        [
            InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])

def get_done_or_decline_keyboard(suggestion_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{suggestion_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"decline_{suggestion_id}")
        ]
    ])

# –ö–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç
def get_maps_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ù–∞ —Ä–∞–±–æ—Ç—É", callback_data="map_work"),
            InlineKeyboardButton("–î–æ–º–æ–π", callback_data="map_home")
        ],
        [
            InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])

def get_weather_keyboard():
    """–ü–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ü–æ–≥–æ–¥–∞'."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–°–µ–π—á–∞—Å", callback_data="weather_now"),
            InlineKeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="weather_today")
        ],
        [
            InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])

def get_prompts_keyboard(current_prompt_id: int) -> InlineKeyboardMarkup:
    """Create inline keyboard for prompt selection."""
    keyboard = []
    for idx, button_text in enumerate(PROMPT_BUTTONS):
        text = f"‚úÖ {button_text}" if idx == current_prompt_id else button_text
        keyboard.append([InlineKeyboardButton(text, callback_data=f"set_prompt_{idx}")])
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

def get_information_bot() -> InlineKeyboardMarkup:
    """Create inline keyboard for bot information."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", callback_data="bot_information"),
            InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è", callback_data="bot_version")
        ],
        [
            InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])

# ------------------- Gemini API Interaction -------------------

async def ask_gemini(user_text: str, user_username: str) -> str:
    """Send a request to the Gemini API."""
    history = get_history(user_username)
    prompt_id = get_user_prompt(user_username)
    prompt = RANDOM_PROMPTS[prompt_id]
    contents = prepare_history(history) + [{
        "role": "user",
        "parts": [{"text": prompt + " " + user_text}]
    }]

    headers = {"Content-Type": "application/json"}
    data = {
        "contents": contents,
        "generationConfig": {
            "temperature": 0.7,
            "maxOutputTokens": 10000,
            "topP": 0.9
        }
    }

    try:
        response = requests.post(
            f"{GEMINI_URL}?key={GEMINI_API_KEY}",
            headers=headers,
            json=data,
            timeout=30
        )
        response.raise_for_status()
        result = response.json()
        ai_reply = result["candidates"][0]["content"]["parts"][0]["text"]
        save_message(user_username, "user", user_text)
        save_message(user_username, "model", ai_reply)
        logger.info(f"User message: User message: {user_username} | {contents}")
        return ai_reply
    except requests.exceptions.RequestException as e:
        logger.error(f"Gemini API error: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except (KeyError, IndexError) as e:
        logger.error(f"Response parsing error: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API."

# ------------------- Command Handlers -------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /start command."""
    await update.message.reply_text(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º Gemini.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!\n\n"
        "–í –≥—Ä—É–ø–ø–µ —É–ø–æ–º–∏–Ω–∞–π—Ç–µ –º–µ–Ω—è —á–µ—Ä–µ–∑ @username_bot –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n\n"
        "–Ø –±–æ—Ç —Å –ø–∞–º—è—Ç—å—é. –ù–∞–ø–∏—à–∏ '–∑–∞–±—É–¥—å', —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.\n\n"
        "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –ò–≤–∞–Ω",
        reply_markup=get_main_keyboard_for_user(user_id)
    )

async def suggest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /suggest command."""
    user_id = update.effective_user.username
    context.user_data[f"suggest_mode_{user_id}"] = True
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=get_main_keyboard_for_user(user_id)
    )
    logger.info(f"User message: –†–µ–∂–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è @{user_id}")

async def add_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user addition commands."""
    if update.effective_user.username != ADMIN_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return

    text = update.message.text.strip()
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        if not target_user.username:
            await update.message.reply_text("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username!")
            return
        username_to_add = target_user.username
    else:
        found_cmd = next((cmd for cmd in ALIASES_FOR_ALLOW if cmd in text), None)
        if not found_cmd:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ '—Ä–∞–∑—Ä–µ—à–∏ –µ–º—É –ø–∏—Å–∞—Ç—å'\n‚Ä¢ –ò–ª–∏ '—Ä–∞–∑—Ä–µ—à–∏ –µ–º—É –ø–∏—Å–∞—Ç—å @username'"
            )
            return
        username_part = text.split(found_cmd, 1)[-1].strip()
        if "@" not in username_part:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ—Å–ª–µ @!")
            return
        username_to_add = username_part.split("@")[-1].strip()
        if not username_to_add:
            await update.message.reply_text("‚ùå Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

    if add_user(username_to_add, update.effective_user.username):
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username_to_add} —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–∏—Å–∞—Ç—å!")
        logger.info(f"User message: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username_to_add}")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è @{username_to_add} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")

async def ban_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user ban commands."""
    if update.effective_user.username != ADMIN_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return

    text = update.message.text.strip()
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        if not target_user.username:
            await update.message.reply_text("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username!")
            return
        username_to_ban = target_user.username.lstrip("@")
    else:
        found_cmd = next((cmd for cmd in ALIASES_FOR_BAN if cmd in text), None)
        if not found_cmd:
            aliases_examples = "\n".join(f"‚Ä¢ {cmd} @username" for cmd in sorted(ALIASES_FOR_BAN)[:3])
            await update.message.reply_text(
                f"‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n{aliases_examples}\n‚Ä¢ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π '–∑–∞–±–∞–Ω—å –µ–≥–æ'"
            )
            return
        username_to_ban = text.split(found_cmd, 1)[-1].strip().lstrip("@").split()[0]
        if not username_to_ban:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ—Å–ª–µ @!")
            return

    if remove_user(username_to_ban):
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_ban} –∑–∞–±–∞–Ω–µ–Ω!")
        logger.info(f"User message: –ó–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username_to_ban}")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_ban} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")


# —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–µ–∫ –∞–∫–∫—Å–µ—Å—Å –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –•–æ—á—É —É–ª—É—á—à–∏—Ç—å



# ------------------- Message and Button Handlers -------------------

async def check_access(update: Update) -> bool:
    """Check if a user has access to the bot."""
    username = update.effective_user.username
    if not username:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username")
        return False
    if username not in allowed_users_cache:
        logger.warning(f"User message: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è @{username}")
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return False
    return True

async def send_coffe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.username != ADMIN_USERNAME:
            return
        await context.bot.send_message(
            chat_id=COFFE_ID,
            text="–ù–∞–ª–∏–≤–∞—Ç–µ –∫–æ—Ñ–∏–π, –ª—é–±–∏–º—Å—É–Ω!",
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info(f"User message: Sent nalivate_coffiy from from @{update.effective_user.username} ")
    except Exception as e:
        logger.error(f"Error in send_coffe: {e}")

async def send_kiss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != WIFE_USERNAME:
        return await update.callback_query.message.reply_text("‚õî –î—è–¥—å, —Ç—ã –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π? –Ø —Ç–æ–ª—å–∫–æ —Å –∂–µ–Ω–æ–π")
    await context.bot.send_message(
        chat_id=CHAT_ID_ADMIN,
        text="–ò–¥–∏—Ç–µ —Ü–µ–ª–æ–≤–∞–∫–∞—Ü–∞ –±–ª–∏–Ω–∞!",
        parse_mode=ParseMode.MARKDOWN
    )
    logger.info(f"User message: Sent —Ü–µ–ª–æ–≤–∞–∫–∞—Ü–∞ from from @{update.effective_user.username} ")


async def send_nezh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != WIFE_USERNAME:
        return await update.callback_query.message.reply_text("‚õî –ï—Ä—É–Ω–¥—É –Ω–µ —Å–µ—Å–∏, —É –º–µ–Ω—è –∂–µ–Ω–∞ –µ—Å—Ç—å")
    await context.bot.send_message(
        chat_id=CHAT_ID_ADMIN,
        text="–ò–¥–∏—Ç–µ –Ω–µ–∂–∏—Ü–∞ –±–ª–∏–Ω–∞!",
        parse_mode=ParseMode.MARKDOWN
    )
    logger.info(f"User message: Sent –Ω–µ–∂–∏—Ü–∞ from from @{update.effective_user.username} ")


async def send_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send the chat ID to the user."""
#    if not await check_access(update):
#        return
    chat_id = update.message.chat.id
    await update.message.reply_text(f"–í–∞—à Chat ID: {chat_id}")
    logger.info(f"User message: Sent chat ID {chat_id} to user @{update.effective_user.username}")

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button click events."""
### –∫–æ—Ä–æ—á–µ —á–µ—Ç –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–æ–º —Ä—É–ª–∏—Ç—å –∏–∑ –º–µ–π–Ω–∞. –ö–Ω–æ–ø–∫–∏ –ø–æ—Ö–æ–¥—É —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ —Ç–∞–∫. –ü–æ–∫–∞ —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Ç–∞–∫ —á—Ç–æ –ø—É—Å—Ç—å —Ç—É—Ç —Ç–æ–∂–µ –±—É–¥–µ—Ç
    if not await check_access(update):
        return

    if not await rate_limit_check(update, context):
        return

    query = update.callback_query
    data = query.data
    user_id = update.effective_user.username

    if data == "text_to_speech":  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–û–∑–≤—É—á–∏—Ç—å"
        if user_id != ADMIN_USERNAME:
            await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–∑–≤—É—á–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!")
            return
        last_response = context.user_data.get(f"last_response_{user_id}", "")
        if not last_response:
            await query.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è!")
            return
        await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ...")
        await text_to_speech(last_response, update, context)

    if data == "clear_history":
        clear_history(user_id)
        await query.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
        await query.message.edit_text(
            query.message.text_markdown or query.message.text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard_for_user(user_id)
        )
    elif data == "change_promt":
        current_prompt_id = get_user_prompt(user_id)
        await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")
        await query.message.reply_text(
            f"*–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç*: {RANDOM_PROMPTS[current_prompt_id]}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_prompts_keyboard(current_prompt_id)
        )
    elif data == "back_to_main":
        await query.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é")
        await query.message.edit_text(
            query.message.text or "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard_for_user(user_id)
        )
    elif data.startswith("set_prompt_"):
        try:
            prompt_id = int(data.split("_")[-1])
            if 0 <= prompt_id < len(RANDOM_PROMPTS):
                set_user_prompt(user_id, prompt_id)
                await query.answer("–ü—Ä–æ–º–ø—Ç –∏–∑–º–µ–Ω–µ–Ω")
                await query.message.reply_text(
                    f"–ü—Ä–æ–º–ø—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {PROMPT_BUTTONS[prompt_id]}",
                    reply_markup=get_main_keyboard_for_user(user_id)
                )
            else:
                await query.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
        except ValueError:
            await query.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

    elif data == "tech_keyboard":
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é")
        await query.message.reply_text(
            "*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é*:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_tech_admin_keyboard()
        )

    elif data == "tech_user_menu":
        await query.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é")
        await query.message.reply_text(
            "*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é*:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_users_inline_keyboard()
        )

    elif data == "wife_keyboard":
        await query.answer("–ú–µ–Ω—é –ª—é–±–∏–º–æ–π –∂–µ–Ω—ã!")
        await query.message.reply_text(
            "*–ú–µ–Ω—é –ª—é–±–∏–º–æ–π –∂–µ–Ω—ã!*:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_my_wife_keyboard()
        )

    elif data == "bot_information_for_user":
        await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        await query.message.reply_text(
            "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è*:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_information_bot()
        )

    elif data == "bot_version":
        await query.message.reply_text(
            VERSION,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard_for_user(user_id)
        )
    elif data == "bot_information":
        await query.message.reply_text(
            INFORMATION_ABOUT_BOT,
#            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_keyboard_for_user(user_id)
        )

    elif data == "set_timer":
        context.user_data["timer_mode"] = True
        await query.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        await query.message.reply_text("–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30, –ø–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã")

    elif data == "get_coffe":
        if update.effective_user.username != ADMIN_USERNAME:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        await send_coffe(update, context)
        await query.answer("–ü–æ–ø—Ä–æ—Å–∏–ª –ö—Ä–∞—Å–æ–ø–µ—Ç—ã—á–∞")

    elif data == "kiss_wife":
        await send_kiss(update, context)
        await query.answer("–°–∫–∞–∑–∞–ª, —á—Ç–æ–±—ã –æ–Ω —à–µ–ª")

    elif data == "nezh_wife":
        await send_nezh(update, context)
        await query.answer("–°–∫–∞–∑–∞–ª, —á—Ç–æ–±—ã –æ–Ω —à–µ–ª")

    elif data == "maps_menu":
        if update.effective_user.username != ADMIN_USERNAME:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        await query.message.reply_text(
            "üó∫ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
            reply_markup=get_maps_keyboard()
        )

    elif data == "make_image":
        if update.effective_user.username != ADMIN_USERNAME:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        context.user_data["awaiting_image_prompt"] = True
        await query.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        await query.message.reply_text("üñº –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –µ—ë")

    elif data == "map_work":
        if update.effective_user.username != ADMIN_USERNAME:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        await query.answer("–°—Ç—Ä–æ—é –º–∞—Ä—à—Ä—É—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É...")
        screenshot_path = f"{DIRECTORY_PATH}/map_work.png"
        await take_screenshot(URL_MAP_WORK, screenshot_path)
        await query.message.reply_photo(photo=open(screenshot_path, "rb"))
        os.remove(screenshot_path)

    elif data == "map_home":
        if update.effective_user.username != ADMIN_USERNAME:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        await query.answer("–°—Ç—Ä–æ—é –º–∞—Ä—à—Ä—É—Ç –¥–æ–º–æ–π...")
        screenshot_path = f"{DIRECTORY_PATH}/map_home.png"
        await take_screenshot(URL_MAP_HOME,screenshot_path)
        await query.message.reply_photo(photo=open(screenshot_path, "rb"))
        os.remove(screenshot_path)

    elif data == "weather_menu":
        await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞")
        await query.message.reply_text(
            "üå§ –ü–æ–≥–æ–¥–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=get_weather_keyboard()
        )

    elif data == "chefirka":
        await send_random_photo(update, context)
        await query.answer("–í–æ—Ç —Ñ–æ—Ç–æ—á–∫–∞ üòâ")

    elif data == "weather_now":
        await weather_command(update, context)

    elif data == "weather_today":
        await today_forecast_command(update, context)

    elif data == "suggest":
        context.user_data[f"suggest_mode_{user_id}"] = True
        await query.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
        await query.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_keyboard_for_user(user_id)
        )
    elif data.startswith("accept_") or data.startswith("reject_"):
        if user_id != ADMIN_USERNAME:
            await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å/–æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
            return
        suggestion_id = int(data.split("_")[1])
        status = "accepted" if data.startswith("accept_") else "rejected"
        suggestion = get_suggestion(suggestion_id)
        if not suggestion:
            await query.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        update_suggestion_status(suggestion_id, status)
        status_text = "–ø—Ä–∏–Ω—è—Ç–æ" if status == "accepted" else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        await query.message.edit_text(
            f"{query.message.text}\n\n*–°—Ç–∞—Ç—É—Å*: {status_text}",
#            parse_mode=ParseMode.MARKDOWN,
            reply_markup=None
        )
        try:
            await context.bot.send_message(
                chat_id=suggestion["chat_id"],
                text=f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {suggestion['suggestion']}\n–ë—ã–ª–æ {status_text} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
#                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{suggestion['username']}: {e}")
        if status == "rejected":
            delete_suggestion(suggestion_id)
            return
        await query.answer(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {status_text}!")

    elif data == "view_suggestions":
        if user_id != ADMIN_USERNAME:
            await query.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
            return

        cursor.execute("SELECT id, username, suggestion, status FROM suggestions")
        rows = cursor.fetchall()

        if not rows:
            await query.message.reply_text("–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")
            return

        for suggestion_id, username, suggestion, status in rows:
            if status == "pending":
                keyboard = get_admin_keyboard(suggestion_id)  # –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
            elif status == "accepted":
                keyboard = get_done_or_decline_keyboard(suggestion_id)  # –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø
            else:
                keyboard = None

            await query.message.reply_text(
                f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{username}:\n\n{suggestion}\n\n–°—Ç–∞—Ç—É—Å: {status}",
                reply_markup=get_done_or_decline_keyboard(suggestion_id)
            )

    elif data.startswith("done_") or data.startswith("decline_"):
        if user_id != ADMIN_USERNAME:
            await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!")
            return

        suggestion_id = int(data.split("_")[1])
        suggestion = get_suggestion(suggestion_id)
        if not suggestion:
            await query.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        status_text = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" if data.startswith("done_") else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"

        try:
            await context.bot.send_message(
                chat_id=suggestion["chat_id"],
                text=f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {suggestion['suggestion']}\n–ë—ã–ª–æ {status_text} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{suggestion['username']}: {e}")

        delete_suggestion(int(suggestion_id))
#------ –∫–æ—Ä–æ—á–µ —Ç–µ–ª–µ–≥–∞ –Ω–µ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ---------
        try:
            await query.message.edit_text(
                f"{query.message.text}\n\n*–°—Ç–∞—Ç—É—Å*: {status_text}",
                reply_markup=None
                )
        except telegram.error.BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
        await query.answer(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {status_text} –∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã!")

#####----------------–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏-------------

async def handle_message2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö, –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç ---
    if update.message.chat.type != "private":
        message_text = update.message.text.lower() if update.message.text else ""
        if not (update.message.text and update.message.text.startswith('/')
                or f"@{context.bot.username}" in message_text
                or any(word.lower() in message_text for word in ["–≤–æ–≤–∞—Å–∏–∫", "—à–Ω—ã—Ä—å"])):
            return

    if not await rate_limit_check(update, context):
        return


    user_id = update.effective_user.username

    # --- –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Vosk API ---
    async def recognize_voice(voice_or_audio):
        file = await context.bot.get_file(voice_or_audio.file_id)
        file_path = "voice.ogg"
        await file.download_to_drive(file_path)

        vosk_url = URL_VOICE
        with open(file_path, "rb") as f:
            response = requests.post(vosk_url, files={"file": f}, timeout=60)
        os.remove(file_path)

        if response.status_code != 200:
            return None
        return response.json().get("text", "").strip()

    # --- –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ/–∞—É–¥–∏–æ ---
    if update.message.forward_date and (update.message.voice or update.message.audio):
        recognized_text = await recognize_voice(update.message.voice or update.message.audio)
        if recognized_text:
            await update.message.reply_text(f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{recognized_text}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å.")
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç—ã ---
    if context.user_data.get(f"map_mode_{user_id}", False):
        url = (update.message.text or "").strip()
        if not url.startswith("http"):
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http(s)://")
            return
        screenshot_path = f"{DIRECTORY_PATH}/map_{user_id}.png"
        try:
            await take_screenshot(url, screenshot_path)
            await update.message.reply_photo(photo=open(screenshot_path, "rb"))
            logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_id}")
        except Exception as e:
            await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        finally:
            if os.path.exists(screenshot_path):
                os.remove(screenshot_path)
            context.user_data[f"map_mode_{user_id}"] = False
        return

    # --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ—ë –≥–æ–ª–æ—Å–æ–≤–æ–µ ---
    if update.message.voice or update.message.audio:
        recognized_text = await recognize_voice(update.message.voice or update.message.audio)
        if not recognized_text:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å.")
            return
        user_text = recognized_text
    else:
        user_text = update.message.text or ""
        if f"@{context.bot.username}" in user_text:
            user_text = user_text.replace(f"@{context.bot.username}", "").strip()

#-----------–∫–∞—Ä—Ç–∏–Ω–∫–∏------------

    if context.user_data.get("awaiting_image_prompt"):
        prompt = user_text.strip()
        context.user_data["awaiting_image_prompt"] = False
        await update.message.reply_text("–ü–µ—Ä–µ–≤–æ–∂—É –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π... üåê")

        # üîπ –ü–µ—Ä–µ–≤–æ–¥–∏–º
        translated = await asyncio.to_thread(translate_to_english, prompt)
        await update.message.reply_text(f"üî§ –ü–µ—Ä–µ–≤–æ–¥: {translated}\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É... ‚è≥")

        image_bytes = generate_image_cf(translated)
        if image_bytes:
            await update.message.reply_photo(photo=image_bytes, caption=f"üñº {prompt}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏.")
        return

    # --- –†–µ–∂–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ---
    if context.user_data.get(f"suggest_mode_{user_id}", False):
        suggestion = user_text.strip()
        if not suggestion:
            await update.message.reply_text(
                "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!",
                reply_markup=get_main_keyboard_for_user(user_id)
            )
            return
        suggestion_id = save_suggestion(user_id, suggestion, update.message.chat.id)
        context.user_data[f"suggest_mode_{user_id}"] = False
        if suggestion_id == -1:
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard_for_user(user_id)
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{user_id}")
            return
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –û–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.",
            reply_markup=get_main_keyboard_for_user(user_id)
        )
        admin_message = (
            f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{user_id}:\n\n"
            f"{suggestion}\n\n"
            f"ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {suggestion_id}"
        )
        try:
            await context.bot.send_message(
                chat_id=CHAT_ID_ADMIN,
                text=admin_message,
                reply_markup=get_admin_keyboard(suggestion_id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω—É.")
        return

    # --- –†–µ–∂–∏–º —Ç–∞–π–º–µ—Ä–∞ ---
    if context.user_data.get("timer_mode"):
        try:
            parts = user_text.split(",", 1)
            time_part = parts[0].strip()
            text_part = parts[1].strip() if len(parts) > 1 else "‚è∞ –í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!"
            now = datetime.now(tz)
            target_time = datetime(
                year=now.year,
                month=now.month,
                day=now.day,
                hour=int(time_part.split(":")[0]),
                minute=int(time_part.split(":")[1]),
                tzinfo=tz
            )
            if target_time <= now:
                target_time += timedelta(days=1)
            timer_id = save_timer(
                update.message.chat_id,
                update.effective_user.username,
                text_part,
                target_time
            )
            scheduler.add_job(
                job_action,
                "date",
                run_date=target_time,
                args=[context.application, update.message.chat_id, text_part, timer_id]
            )
            await update.message.reply_text(
                f"–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {target_time.strftime('%H:%M')} ‚Äî {text_part}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–∫–æ–π ‚Äî –ß–ß:–ú–ú, —Ç–µ–∫—Å—Ç")
        finally:
            context.user_data["timer_mode"] = False
        return

    # --- –ö–æ–º–∞–Ω–¥—ã ---
    if any(cmd in user_text.lower() for cmd in ALIASES_FOR_ALLOW):
        await add_user_handler(update, context)
        return

    if any(cmd in user_text.lower() for cmd in ALIASES_FOR_BAN):
        await ban_user_handler(update, context)
        return

    if "–∑–∞–±—É–¥—å" in user_text.lower():
        clear_history(user_id)
        await update.message.reply_text("üóë –í—Å—ë –∑–∞–±—ã—Ç–æ! –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")
        return

    if "—Å–º–µ–Ω–∏ –ø—Ä–æ–º—Ç –Ω–∞ " in user_text.lower():
        parts = user_text.split()
        if len(parts) >= 4 and parts[3].isdigit():
            new_prompt = int(parts[3])
            if 0 <= new_prompt < len(RANDOM_PROMPTS):
                set_user_prompt(user_id, new_prompt)
                await update.message.reply_text(f"–°–º–µ–Ω–∏–ª –ø—Ä–æ–º—Ç –Ω–∞ {PROMPT_BUTTONS[new_prompt]}")
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞.")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å–º–µ–Ω–∏ –ø—Ä–æ–º—Ç –Ω–∞ X'")
        return

    if "—Å–∫–∞–∂–∏ –≤–µ—Ä—Å–∏—é" in user_text.lower().strip():
        await update.message.reply_text(VERSION)
        return

    # --- Gemini ---
    await update.message.chat.send_action(action="typing")
    response = await ask_gemini(user_text, user_id)
    response = replace_standalone_asterisks(response)
    text_parts = split_text_for_telegram(fmt_escape(response))
    context.user_data[f"last_response_{user_id}"] = response
    for part in text_parts:
        try:
            await update.message.reply_text(
                part,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_main_keyboard_for_user(user_id)
            )
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# ------------------- Main Function -------------------

def main():
    """Start the bot."""
    app = Application.builder().token(BOT_TOKEN).post_init(post_init).build()

    app.add_handler(CommandHandler("start", start, filters=access_filter))
    app.add_handler(CommandHandler("suggest", suggest_command, filters=access_filter))
    app.add_handler(CommandHandler("chatid", send_chat_id, filters=access_filter))
    app.add_handler(CommandHandler("coffe", send_coffe, filters=access_filter))
    app.add_handler(CommandHandler("map", map_command, filters=access_filter))
    app.add_handler(CommandHandler("weather", weather_command, filters=access_filter))
    app.add_handler(MessageHandler(access_filter & (filters.TEXT | filters.VOICE | filters.AUDIO) & ~filters.COMMAND, handle_message2))
    app.add_handler(MessageHandler(access_filter & filters.PHOTO, save_photo))
    app.add_handler(CallbackQueryHandler(button_click))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
